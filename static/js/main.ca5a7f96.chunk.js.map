{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","response","setResponse","fetchUser","a","axios","get","data","message","className","src","logo","alt","href","target","rel","onClick","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","mswWorker","start","serviceWorker","url","findWorker","scriptURL","_mockServiceWorkerUrl","includes","onUnhandledRequest","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"8PAAe,MAA0B,iC,eCqD1BA,MA/Cf,WACE,MAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAS,uCAAG,gCAAAC,EAAA,+EAESC,IAAMC,IAAI,SAFnB,gBAENC,EAFM,EAENA,KAGRL,EAAYK,GALE,gDAQRC,EAAkB,KAAMP,SAC1B,KAAMA,SAASM,KAAKC,QACpB,KAAMA,QAEVN,EAAY,CACVM,YAbY,yDAAH,qDAkBf,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BASF,iCACE,wBAAQ,cAAY,eAAeC,QAASb,EAA5C,wBAGA,sBAAM,cAAY,WAAlB,SAA8Bc,KAAKC,UAAUjB,YCjCtCkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAH,mDAA0BE,MAAK,qBAAGM,UAC7BC,MAAM,CACdC,cAAe,CACbC,IAAK,0BAEPC,WAAY,SAACC,EAAWC,GAAZ,OACVD,EAAUE,SAAS,sBACrBC,mBAAoB,cAQbd,MAAK,WAClBe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtB,EAAgBuB,QAAQC,U","file":"static/js/main.ca5a7f96.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\nimport axios from 'axios';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [response, setResponse] = useState<any>();\n\n  const fetchUser = async () => {\n    try {\n      const { data } = await axios.get('/user');\n\n      // Reference: https://stackoverflow.com/questions/53949393/cant-perform-a-react-state-update-on-an-unmounted-component\n      setResponse(data);\n    } catch (error: any) {\n      // Reference: https://stackoverflow.com/questions/49967779/axios-handling-errors\n      const message: string = error.response\n        ? error.response.data.message\n        : error.message;\n\n      setResponse({\n        message,\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <main>\n        <button data-testid=\"fetchUserBtn\" onClick={fetchUser}>\n          Fetch user\n        </button>\n        <code data-testid=\"response\">{JSON.stringify(response)}</code>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction prepareMocks() {\n  if (process.env.REACT_APP_USE_MOCK === 'true') {\n    return import('./mocks/browser').then(({ mswWorker }) =>\n      mswWorker.start({\n        serviceWorker: {\n          url: './mockServiceWorker.js',\n        },\n        findWorker: (scriptURL, _mockServiceWorkerUrl) =>\n          scriptURL.includes('mockServiceWorker'),\n        onUnhandledRequest: 'bypass',\n      }),\n    );\n  }\n\n  return Promise.resolve();\n}\n\nprepareMocks().then(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n  );\n\n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals(console.log);\n});\n"],"sourceRoot":""}